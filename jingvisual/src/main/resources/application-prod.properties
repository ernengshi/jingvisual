#http://blog.didispace.com/springbootproperties/
#生产环境
#    application.properties中配置通用内容，并设置spring.profiles.active=dev，以开发环境为默认配置
#    application-{profile}.properties中配置各个环境不同的内容
#    通过命令行方式去激活不同环境的配置

server.port=80

#JdbcTemplate 要是有多数据源则不能有默认的
#Spring的JdbcTemplate是自动配置的，你可以直接使用@Autowired来注入到你自己的bean中来使用

#spring.datasource.url=jdbc:mysql://192.168.20.254:3306/test
#spring.datasource.username=cloud
#spring.datasource.password=cloud
#spring.datasource.driver-class-name=com.mysql.jdbc.Driver

#连接JNDI数据源
#spring.datasource.jndi-name=java:jboss/datasources/customers

#jdbctemplate
spring.jdbc.template.max-rows=500
spring.jdbc.template.fetch-size=100

#自动创建表结构的设置

#create：每次加载hibernate时都会删除上一次的生成的表，然后根据你的model类再重新来生成新表，哪怕两次没有任何改变也要这样执行，这就是导致数据库表数据丢失的一个重要原因。
#create-drop：每次加载hibernate时根据model类生成表，但是sessionFactory一关闭,表就自动删除。
#update：最常用的属性，第一次加载hibernate时根据model类会自动建立起表的结构（前提是先建立好数据库），以后加载hibernate时根据model类自动更新表结构，即使表结构改变了但表中的行仍然存在不会删除以前的行。要注意的是当部署到服务器后，表结构是不会被马上建立起来的，是要等应用第一次运行起来后才会。
#validate：每次加载hibernate时，验证创建数据库表结构，只会和数据库中的表进行比较，不会创建新表，但是会插入新值
spring.jpa.properties.hibernate.hbm2ddl.auto=update
#开启hibernate对sql语句的打印
spring.jpa.properties.hibernate.show_sql=true


#多数据源配置
#数据源1
spring.datasource.primary.url=jdbc:mysql://192.168.20.254:3306/test?useUnicode=true&characterEncoding=utf-8
spring.datasource.primary.username=cloud
spring.datasource.primary.password=cloud
spring.datasource.primary.driver-class-name=com.mysql.jdbc.Driver
#连接池配置
#指定连接池最大的空闲连接数量
spring.datasource.primary.max-idle=10
#指定连接池等待连接返回的最大等待时间，毫秒单位.
spring.datasource.primary.max-wait=10000
#指定必须保持连接的最小值(For DBCP and Tomcat connection pools)
spring.datasource.primary.min-idle=5
#指定启动连接池时，初始建立的连接数量
spring.datasource.primary.initial-size=5
#指定获取连接时连接校验的sql查询语句.
spring.datasource.primary.validation-query=SELECT 1 FROM DUAL
#获取连接时候验证，会影响性能
spring.datasource.primary.test-on-borrow=false
#验证连接的有效性
spring.datasource.primary.test-while-idle=true
#空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟
spring.datasource.primary.time-between-eviction-runs-millis=300000
#连接池空闲连接的有效时间 ，设置30分钟
spring.datasource.primary.min-evictable-idle-time-millis=1800000

#数据源2
spring.datasource.secondary.url=jdbc:mysql://192.168.20.254:3306/cloud?useUnicode=true&characterEncoding=utf-8
spring.datasource.secondary.username=cloud
spring.datasource.secondary.password=cloud
spring.datasource.secondary.driver-class-name=com.mysql.jdbc.Driver
#连接池配置
#指定连接池最大的空闲连接数量
spring.datasource.secondary.max-idle=10
#指定连接池等待连接返回的最大等待时间，毫秒单位.
spring.datasource.secondary.max-wait=10000
#指定必须保持连接的最小值(For DBCP and Tomcat connection pools)
spring.datasource.secondary.min-idle=5
#指定启动连接池时，初始建立的连接数量
spring.datasource.secondary.initial-size=5
#指定获取连接时连接校验的sql查询语句.
spring.datasource.secondary.validation-query=SELECT 1 FROM DUAL
#获取连接时候验证，会影响性能
spring.datasource.secondary.test-on-borrow=false
#验证连接的有效性
spring.datasource.secondary.test-while-idle=true
#空闲连接回收的时间间隔，与test-while-idle一起使用，设置5分钟
spring.datasource.secondary.time-between-eviction-runs-millis=300000
#连接池空闲连接的有效时间 ，设置30分钟
spring.datasource.secondary.min-evictable-idle-time-millis=1800000